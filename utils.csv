  
  INFO:Paceholders {alg}{attack}{hash}{wl1}{wl2}{wl3}{rules}{output}{session} wil be replaced by fields values (optional)
   <-- HASHCAT UTILS -->
haschat --help ;  Help
hashcat --help | grep -i ntlm;  Filter NTLM
hashcat  -hh   |grep -i brain ;  Filter Brain Commands
hashcat --show {alg} {hash}   ;   Show cracked hashs (potfile)
hashcat --version ; Shows the current version of Hashcat installed.
hashcat --benchmark ;  Runs a benchmark to evaluate the performance of the cracking setup.
hashcat --benchmark-all ;  Runs a benchmark for all supported hash types to evaluate performance.
hashcat --debug-mode=1 ;  Enables debug mode to show detailed information about the cracking process.
hashcat --debug-mode=2 ;  Enables more verbose debug mode with additional information.
hashcat --session={session} --status ;  Displays the status of a specific session named "my_session."
hashcat --session={session} --restore ;  Restores a specific session named "my_session."
hashcat --session={session} --status-timer=10 ;  Sets the timer to display the status of a specific session every 10 seconds.
hashcat --quiet ;  Runs Hashcat in quiet mode, suppressing output messages.
hashcat --show hash.txt ;  Displays the cracked passwords from the specified hash file.
hashcat --restore ;  Restores a previously interrupted session.
hashcat --force ;  Forces Hashcat to run despite potential warnings or issues.
hashcat --status ;  Displays the current status of the cracking process.
hashcat --potfile-path=custom_pot.txt ;  Specifies a custom path for the potfile that stores cracked passwords.
hashcat --stdout ;  Outputs the generated candidates to standard output instead of running a cracking session.
hashcat --hash-type ;  Lists all supported hash types and their corresponding modes.
hashcat --backend-info ;  Displays information about the available OpenCL platforms and devices.
hashcat --self-test ;  Runs self-tests for the Hashcat installation and displays results.
hashcat --show --potfile-path=custom_pot.txt ;  Displays cracked passwords using a custom potfile.
hashcat --hash-type=100 ; Displays information on the specific hash type (SHA1 in this case).
hashcat --example-hashes ;  Displays example hashes for supported types to help users understand format.
hashcat --self-test-disable ;  Disables self-tests on startup for faster launch.
hashcat --opencl-info ;  Displays information about the OpenCL platforms and devices available.
hashcat --custom-charset1=@abc123 ;  Creates a custom character set for specific attacks.
hashcat --custom-charset2=?d ;  Defines a second custom character set using digits.
hashcat --list-hashes ;  Lists all hash types with their corresponding numbers for easier reference.
hashcat --version --show ;  Displays version information along with supported hash types.
hashcat --hwmon-disable ;  Disables hardware monitoring to improve performance.
hashcat --potfile-path=/path/to/potfile.txt ;  Uses a specified potfile to save cracked hashes.
hashcat --opencl-device-types=1 ;  Specifies the types of devices to use for cracking (1 = GPU, 2 = CPU).
hashcat --attack-mode=1 --hash-type=0 --stdout ;  Generates and displays candidate passwords without running a cracking session.
  
   <- Hashcat Utils -Combinator -> 
./combinator3.bin {wl1} {wl2} > wl_result.txt;  combine 2 Wordlists https://github.com/hashcat/hashcat-utils/; combinator
./combinator3.bin {wl1} {wl2} {wl3} > wl_result.txt;  combine 3 Wordlists https://github.com/hashcat/hashcat-utils/; combinator
./combinator3.bin {wl1} {wl2} {wl3} > wl_result.txt;   combine 4 Wordlists https://github.com/hashcat/hashcat-utils/; combinator
  
  <- Hashcat PRINCE Processor ->
     <- PRobability INfinite Chained Elements- >
./pp64 < wordlist.txt ; https://github.com/hashcat/princeprocessor.git ; prince
./pp64 < {wl1} ; input (wordlist1) wl1 to processsor ; Prince
./pp64 < {wl1} > wl_prince-output.txt ; input wl1 and output new wl_prince-output.txt; prince
./pp64 < {wl1} | hashcat -a 0 -m 1000 hash.txt; Direct use with hashcat ; prince
./pp64 < {wl1} | hashcat {attack} {alg} {hash};  Direct to Hashcat   ; prince
./pp64 --pw-max=8 < {wl1} | hashcat {attack} {alg} {hash};  Generate Password Max. ; prince
./pp64 --pw-max=12 < {wl1} | hashcat {attack} {alg} {hash}; Generate Password Min.  ; prince
./pp64 --pw-min=6 --pw-max=12 --elem-cnt-min=1 --elem-cnt-max=5 < {wl1} | hashcat {attack} {alg} {hash};  All params ; prince
 
  <- Hashcat KWP - KEYWALK processor ->
./kwp basecharfile.base keymap.keymap route.txt ; https://github.com/hashcat/kwprocessor ; kwp
./kwp --help; Help Command  ; kwp 
echo "313" > 313.route, --> create 313.route (3 one dir, 1 another direction, 3 another direction); kwp
echo "q" > q.base;  -->create file q.base (q key start); kwp
./kwp q.base ./keymaps/en-us.keymap 313.route; en-us Keyboard ; kwp
echo "313" > ./rt/313.route && echo "q" > ./bases/q.base && ./kwp q.base ./keymaps/en-us.keymap 313.route; all in one sucess commands &&; kwp
./kwp ./bases/q.base ./keymaps/en-us.keymap ./rts/313.route -s1; Added Shift Key Option ; kwp
./kwp ./bases/q.base ./keymaps/en-us.keymap ./rts/313.route -a1; Added Alt GR Key Option ; kwp
  
 <-Hashcat PCFG - (Probabilistic Context-Free Grammar) ->
    <- analisys - Password123! ou John1987@ [word][number][simbol] ->
python trainer.py -r my_trained_1 -e UTF-8 --coverage 0.2 -t wordlist_trainer.txt; https://github.com/lakiw/pcfg_cracker ; pcfg
python pcfg_guesser.py -r mytrained_1 > result_wordlist.txt; (1) Trainer, (2) Guesser ; pcfg
python trainer.py -r {wl1}_trained_1 -e UTF-8 --coverage 0.2 -t {wl1}; --coverage 0.1 to 1.0-> 10% -100% of the data in wl1.txt will be used for training. 0.1 fast wordlist, 1.0 bigger result wordlist ; pcfg

   <- MARKOV Statistics ->
./hcstat2gen.bin outfile < dictionary ; --markov-hcstat A tool for generating custom Markov statistics
./hcstat2gen.bin hcstat2_output_raw.bin </path/to/dict.txt
lzma --compress --format=raw --stdout -9e hcstat2_output_raw.bin > output.hcstat2 


  <- Hashcat Brain -z -> 
hashcat -hh |grep -i brain
hashcat --brain-server --brain-password=demo --brain-port=8888
hashcat --brain-server --brain-password=pwd --brain-port=8888 --brain-server-timer=10 ; start brain server
hashcat --brain-server --brain-password=pwd --brain-server-port=8888 --brain-server-timer=10 --brain-session-whitelist=session_whitelist; start brain server with whitelist only sessions allowed | Clients have --brain-session=session_whitelist
nohup hashcat --brain-server --brain-password=pwd --brain-server-port=8888 &   ; continue server even when terminal is closed (linux)
hashcat --brain-client --brain-password=demo=pwd --brain-client-feature=1 --brain-server <ip> --brain-server-port <port> --brain-client-id <client_id> {attack} {alg} {hash} {wl1}; CLIENT -> brain-client-feature=1 disables duplicate candidates (slow hashs)
hashcat --brain-client --brain-password=demo=pwd --brain-client-feature=2 --brain-server <ip> --brain-server-port <port> --brain-client-id <client_id> {attack} {alg} {hash} {wl1}; CLIENT -> brain-client-feature=2 enables sessions
hashcat --brain-client --brain-password=demo=pwd --brain-client-feature=3 --brain-server <ip> --brain-server-port <port> --brain-client-id <client_id> {attack} {alg} {hash} {wl1}; CLIENT -> brain-client-feature=3 enables sessions without duplicate candidates


  <-Other Tools-->
hashcat -z --brain-password=demo --brain-client-feature=1 --runtime=15 -a 0 -m 14800 iTunes11.hash ~/wl/rockyou.txt ; Activates
hashcat ~/wl/example.txt -r ~/rules/best64.rule --stdout -o duplicates.txt ; Find candidates after rukes
hashcat {wl1} -r ~/rules/best64.rule --stdout -o {output} ; Find candidates after Rules
cat duplicates.txt |wc - l ; Count lines   
sort -u duplicates.txt | wc -l  ; Count Duplicates
hashcat -z --brain-password=demo --brain-client-feature=3 --runtime=30 {attack} {alg} {hash} {wl1} -r ~/rules/best64.rule  ; less 28% candidates (removed duplicates with --brain-client-feature=3
  
  <-- Keyspace -->
hashcat {wl1} --keyspace, calculate number of combinations
hashcat {alg}{attack}{hash}{wl1}{wl2}{wl3}{rules} --keyspace, calculate number of combinations

  
